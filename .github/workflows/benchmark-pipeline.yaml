name: Benchmark Pipeline

on:
  workflow_dispatch:
    inputs:
      cncf_project:
        description: Project to be deployed e.g. falco
        required: true
        type: choice
        options:
          - falco
      config:
        description: Configuration if project has multiple variants they wish to test (defaults to all)
        required: false
        type: string
      version:
        description: Version of project to be tested e.g. 0.37.0
        required: true
        type: string
      benchmark_job_url:
        description: URL of the benchmark job
        required: true
        type: string
      benchmark_job_duration_mins:
        description: Duration of the benchmark job
        required: true
        type: number

concurrency:
  group: benchmark
  cancel-in-progress: false

defaults:
  run:
    working-directory: infrastructure/oracle-cloud

jobs:
  print_summary:
    runs-on: ubuntu-latest
    steps:
      - name: Add to Summary
        run: |
          echo "## Workflow Input Parameters" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| cncf_project | ${{ github.event.inputs.cncf_project }} |" >> $GITHUB_STEP_SUMMARY
          echo "| config | ${{ github.event.inputs.config }} |" >> $GITHUB_STEP_SUMMARY
          echo "| version | ${{ github.event.inputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| benchmark_job_url | ${{ github.event.inputs.benchmark_job_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| benchmark_job_duration_mins | ${{ github.event.inputs.benchmark_job_duration_mins }} |" >> $GITHUB_STEP_SUMMARY
        working-directory: "."

  benchmark:
    runs-on: ubuntu-24.04
    env:
      TF_LOG: INFO
      TF_VAR_api_key_fingerprint: ${{ secrets.API_KEY_FINGERPRINT }}
      TF_VAR_compartment_ocid: ${{ secrets.COMPARTMENT_OCID }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_tenancy_ocid: ${{ secrets.TENANCY_OCID }}
      TF_VAR_user_ocid: ${{ secrets.USER_OCID }}
    steps:
      - uses: actions/checkout@v4
      - uses: opentofu/setup-opentofu@v1

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add ~/.ssh/id_rsa
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - name: Add API private key
        run: |
          mkdir -p ~/.oci
          echo "${{ secrets.API_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem

      - name: tofu init
        run: tofu init

      - name: tofu plan
        run: tofu plan

      - name: tofu apply
        run: tofu apply -auto-approve
      
      - name: copy kubeconfig
        run: cp kube-config ../..
      
      - uses: dagger/dagger-for-github@v7
        with:
          module: "."
          version: "0.18.5"
          args: setup-cluster
              --source='.'
              --kubeconfig='/src/kube-config'

      - uses: dagger/dagger-for-github@v7
        with:
          module: "."
          version: "0.18.5"
          args: benchmark-pipeline
              --source='.'
              --kubeconfig='/src/kube-config'
              --cncf-project='${{ inputs.cncf_project }}'
              --config='${{ inputs.config }}'
              --version='${{ inputs.version }}'
              --benchmark-job-url='${{ inputs.benchmark_job_url }}'
              --benchmark-job-duration-mins=${{ inputs.benchmark_job_duration_mins }}

      - name: tofu destroy
        if: always()
        run: tofu destroy -auto-approve
